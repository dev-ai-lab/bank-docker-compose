version: "3.8"

services:
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.1
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis-for-ratelimiter:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  # START: rabbit MQ using for config change at runtime and spring cloud streaming using spring cloud functions
  rabbit-mq:
    image: rabbitmq:3.12-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-service
  # END: rabbit MQ using for config change at runtime and spring cloud streaming using spring cloud functions

  # START: spring cloud stream using Kafka
  kafka:
    image: docker.io/bitnami/kafka:3.6
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    extends:
      file: common-config.yml
      service: network-deploy-service # To put the kafka in the same network as other services

  bank-accounts-db:
    container_name: bank-accounts-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: bank-accounts-db
    extends:
      file: common-config.yml
      service: microservice-db-config

  bank-cards-db:
    container_name: bank-cards-db
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: bank-cards-db
    extends:
      file: common-config.yml
      service: microservice-db-config

  bank-loans-db:
    container_name: bank-loans-db
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: bank-loans-db
    extends:
      file: common-config.yml
      service: microservice-db-config
  
  config-server:
    image: dockerxya/config-server:latest
    ports:
      - "8071:8071"
    healthcheck:
      #test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1" # NOTE: This test needs curl installed on the image which is not available in our openjdk image
      test: "java /health/HealthCheck.java || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      rabbit-mq:
        condition: service_healthy
      zipkin:
        condition: service_started
    environment:
       SPRING_ZIPKIN_BASEURL: http://zipkin:9411/
       MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
       OTEL_SERVICE_NAME: "config-server"
    extends:
      file: common-config.yml
      service: microservice-base-config

  bank-accounts:
    image: dockerxya/bank-accounts:latest
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: bank-accounts
      SPRING_DATASOURCE_URL: jdbc:mysql://bank-accounts-db:3306/bank-accounts-db
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411/
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      OTEL_SERVICE_NAME: "bank-accounts"
      SPRING_CLOUD_STREAM_BINDERS_RABBITMQ_ENVIRONMENT_SPRING_RABBITMQ_HOST: rabbit-mq
      SPRING_CLOUD_STREAM_BINDERS_KAFKA_ENVIRONMENT_SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092

    depends_on:
      bank-accounts-db:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy

  bank-cards:
    image: dockerxya/bank-cards:latest
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: bank-cards
      SPRING_DATASOURCE_URL: jdbc:mysql://bank-cards-db:3306/bank-cards-db
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411/
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      OTEL_SERVICE_NAME: "bank-cards"
    depends_on:
      bank-cards-db:
        condition: service_healthy

  bank-loans:
    image: dockerxya/bank-loans:latest
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: bank-loans
      SPRING_DATASOURCE_URL: jdbc:mysql://bank-loans-db:3306/bank-loans-db
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411/
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      OTEL_SERVICE_NAME: "bank-loans"
    depends_on:
      bank-loans-db:
        condition: service_healthy

  # START: spring cloud function and streaming
  bank-messaging-service:
    image: dockerxya/bank-messaging-service:latest
    depends_on:
      rabbit-mq:
        condition: service_healthy
    environment:
      #SPRING_RABBITMQ_HOST: rabbit-mq
      SPRING_CLOUD_STREAM_BINDERS_RABBITMQ_ENVIRONMENT_SPRING_RABBITMQ_HOST: rabbit-mq
      SPRING_CLOUD_STREAM_BINDERS_KAFKA_ENVIRONMENT_SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
    extends:
      file: common-config.yml
      service: network-deploy-service
  # END: spring cloud function and streaming

  eureka-server:
    image: dockerxya/eureka-server:latest
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-config-server-config
    environment:
      SPRING_APPLICATION_NAME: eureka-server
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411/
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      OTEL_SERVICE_NAME: "eureka-server"

  gateway-server:
    image: dockerxya/gateway-server:latest
    ports:
      - "8072:8072"
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    depends_on:
      # We can't use service_healthy because the health check on the services is not working - curl is not installed on the container.
      bank-accounts:
        condition: service_started
      bank-cards:
        condition: service_started
      bank-loans:
        condition: service_started
      redis-for-ratelimiter:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: gateway-server
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411/
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_DATA_REDIS_HOST: redis-for-ratelimiter
      OTEL_SERVICE_NAME: "gateway-server"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/master/protocol/openid-connect/certs

  ## START - Monitoring config
  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../monitoring/loki/loki-config.yml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      bank:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../monitoring/loki/loki-config.yml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ../monitoring/promtail/promtail-local-config.yml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # Copy the prometheus config file to docker in order to use it at the startup
    extends:
      file: common-config.yml
      service: network-deploy-service
  # Tempo is used for indexing distributed tracing info
  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../monitoring/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      # Grafana will look for this path /etc/grafana/provisioning/datasources/datasource.yml and setup connection to loki and prometheus
      - ../monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    extends:
      file: common-config.yml
      service: network-deploy-service
  ## END - Monitoring Config

volumes:
  kafka_data:
    driver: local

# Communication is possible only in the same network
networks:
  bank: